snippet ipdb "Insert ipdb trace" bA
import ipdb
ipdb.set_trace()
endsnippet

snippet pdb "Insert pdb trace" bA
import pdb
pdb.set_trace()
endsnippet

snippet "st |set_trace" "Insert nose compatible trace" rbA
from nose.tools import set_trace
set_trace()
endsnippet

snippet "while " "While loop" rbA
while ${1:condition}:
	${0:pass}
endsnippet

snippet "with " "With context manager" rbA
with ${1:expr} as ${2:var}:
	${0:pass}
endsnippet

snippet "def " "Function with doctstring" rbA
def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
	"""${3:docstring for $1}"""
	${0}
endsnippet

snippet "defi" "__init__ function" rbA
def __init__(self, ${1:param}):
	${0}
endsnippet

snippet "class " "Class with docstring" rbA
class ${1:ClassName}(${2:object}):
	"""${3:docstring for $1}"""
	${0}
endsnippet

snippet deff "Function without docstring" bA
def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
	${0:pass}
endsnippet

snippet defm "Method with docstring" bA
def ${1:mname}(self, ${2:arg}):
	"""${3:docstring for $1}"""
	${0:pass}
endsnippet

snippet deffm "Method without docstring" bA
def ${1:mname}(self, ${2:arg}):
	${0:pass}
endsnippet

snippet ifm "Main if statement" bA
if __name__ == '__main__':
	main()
endsnippet

snippet ifel "If clause" bA
if ${1:condition}:
	${2:pass}
else:
	${0:pass}
endsnippet

snippet "if " "If/Else Clause" rbA
if ${1:condition}:
	${0:pass}
endsnippet

snippet else "Else clause" bA
else:
	${0:pass}
endsnippet

snippet "elif " "Elif Clause" rbA
elif ${1:condition}:
	${0:pass}
endsnippet

snippet "for " "For loop" rbA
for ${1:item} in ${2:items}:
	${0:pass}
endsnippet

snippet try "Try/Except" b
try:
	${1:pass}
except ${2:Exception} as ${3:exception}:
	${0:raise $3}
endsnippet

snippet try "Try/Except/Else" b
try:
	${1:pass}
except ${2:Exception} as ${3:exception}:
	${4:raise $3}
else:
	${0:pass}
endsnippet

snippet try "Try/Except/Finally" b
try:
	${1}
except ${2:Exception} as ${3:exception}:
	${4:raise $3}
finally:
	${0:pass}
endsnippet

snippet try "Try/Except/Else/Finally" b
try:
	${1:pass}
except ${2:Exception} as ${3:exception}:
	${4:raise $3}
else:
	${5:pass}
finally:
	${0}
endsnippet
