usage: manage.py cleandb [-h] [--version] [-v {0,1,2,3}] [--settings SETTINGS]
                         [--pythonpath PYTHONPATH] [--traceback] [--no-color]
                         [--empty] [--no-fixtures] [--migrate] [--no-cms-data]

Exports one function, cleandb, which destroys, recreates, syncs, a fresh db.
Used for local development only. ## Overview - Build tables from scratch with
syncdb or create them through a series of migrations - For each app, load
fixtures/initial_data.json. This should not be used except for very small
data. See JSON vs SQL below. - For some apps, load fixtures/essential.json.
See essential vs initial_data below. - For some apps, load
fixtures/essential_*.sql - For some apps, load fake data programmatically -
Load misc. named fixtures like subtypes.json - Install user permissions -
Create basic dummy accounts - Create file directories for protected files and
MEDIA_ROOT - For some apps, load data from the CMS data dump JSON file. ##
essential vs initial_data "Essential" is Counsyl's term for fixtures that are
necessary for the site to run. These are a class of fixtures that we need
loaded with every fresh DB and which is more or less static once loaded. ##
JSON vs SQL fixtures Django's de-serializers perform one SQL INSERT per
object. This is prohibitively slow for fixtures of any significant size. JSON
is nice for hand-editing fixtures and viewing diffs, but those wins are not
usually worth the tremendous slowdown in cleandb. In almost all cases, use SQL
fixtures over JSON. See the tools in `common.utils.db` and the example cases
`inventory_dump`, `genomics_update_dump`, and similar tools for how to
generate the fixtures from an existing database. Future changes can then be
made via (1) datamigrations and (2) new data dumps. JSON may be preferred for
very small fixtures (such as the common app's initial_data.json) or in special
circumstances. ## What should be loaded by cleandb? Only fixtures absolutely
necessary for running of the website should be loaded by cleandb. At one
point, cleandb loaded a bunch of nice-to-have-for-development fixtures of
common scenarios, but this is not a scalable strategy. Each app should define
its own fake data creators in clearly-namespaced modules and expose them via
management commands. Developers can then alias/script common scenarios for
their own use -- it is not feasible to enumerate all development scenarios.
The above rule is unfortunately not currently followed, but please do work
towards it. By default, cleandb will not load the "hgmd" and "sequencing"
fixtures, since most developers will not need them. Individual fixtures can be
loaded with the `load_sql_fixtures` command. Alternatively, cleandb will
automatically load SQL fixtures specified in the setting
`CLEANDB['extra_sql_fixtures']` in addition to the default set of fixtures.
E.g. in `settings_local.py`: settings['CLEANDB']['extra_sql_fixtures'] =
('hgmd', 'sequencing', 'curation') # nopep8 Also `protocols.json` fixuture in
the `inventory` app will not be loaded by default, because it doesn't have the
'essential' prefix. It can be loaded manually by calling `loaddata` management
command. The alternative is to make cleandb load it every time it's executed.
This can be achieved by specifying the `CLEANDB['extra_json_fixtures']` in
your `settings_local.py`, like this:
settings['CLEANDB']['extra_json_fixtures'] = [('inventory', 'protocols.json')]

optional arguments:
  -h, --help            show this help message and exit
  --version             show program's version number and exit
  -v {0,1,2,3}, --verbosity {0,1,2,3}
                        Verbosity level; 0=minimal output, 1=normal output,
                        2=verbose output, 3=very verbose output
  --settings SETTINGS   The Python path to a settings module, e.g.
                        "myproject.settings.main". If this isn't provided, the
                        DJANGO_SETTINGS_MODULE environment variable will be
                        used.
  --pythonpath PYTHONPATH
                        A directory to add to the Python path, e.g.
                        "/home/djangoprojects/myproject".
  --traceback           Raise on CommandError exceptions
  --no-color            Don't colorize the command output.
  --empty               Drop the database if it exists and create an empty
                        fresh database to work with. No tables will be
                        created.
  --no-fixtures         Drop the database, create an empty database, then run
                        syncdb but don't load any fixtures.
  --migrate             Drop the database, create an empty database, run
                        syncdb to load the mon-migrated tables with the
                        --migrate flag to also load entire migration history.
  --no-cms-data         Drop the database, create an empty database, then run
                        syncdb and load extra fixtures but do NOT install data
                        from the CMS data file.
