usage: manage.py graph_models [-h] [--version] [-v {0,1,2,3}]
                              [--settings SETTINGS] [--pythonpath PYTHONPATH]
                              [--traceback] [--no-color] [--inheritance]
                              [--include-models INCLUDE_MODELS]
                              [--hide-relations-from-fields]
                              [--exclude-columns EXCLUDE_COLUMNS]
                              [--verbose-names] [--disable-sort-fields]
                              [--output OUTPUTFILE] [--language LANGUAGE]
                              [--group-models] [--pygraphviz] [--json]
                              [--layout LAYOUT]
                              [--exclude-models EXCLUDE_MODELS]
                              [--disable-fields] [--pydot]
                              [--all-applications] [--no-inheritance]
                              [app_label [app_label ...]]

Creates a GraphViz dot file for the specified app names. You can pass multiple
app names and they will all be combined into a single model. Output is usually
directed to a dot file.

positional arguments:
  app_label

optional arguments:
  -h, --help            show this help message and exit
  --version             show program's version number and exit
  -v {0,1,2,3}, --verbosity {0,1,2,3}
                        Verbosity level; 0=minimal output, 1=normal output,
                        2=verbose output, 3=very verbose output
  --settings SETTINGS   The Python path to a settings module, e.g.
                        "myproject.settings.main". If this isn't provided, the
                        DJANGO_SETTINGS_MODULE environment variable will be
                        used.
  --pythonpath PYTHONPATH
                        A directory to add to the Python path, e.g.
                        "/home/djangoprojects/myproject".
  --traceback           Raise on CommandError exceptions
  --no-color            Don't colorize the command output.
  --inheritance, -e     Include inheritance arrows (default)
  --include-models INCLUDE_MODELS, -I INCLUDE_MODELS
                        Restrict the graph to specified models. Wildcards (*)
                        are allowed.
  --hide-relations-from-fields, -R
                        Do not show relations as fields in the graph.
  --exclude-columns EXCLUDE_COLUMNS, -x EXCLUDE_COLUMNS
                        Exclude specific column(s) from the graph. Can also
                        load exclude list from file.
  --verbose-names, -n   Use verbose_name of models and fields
  --disable-sort-fields, -S
                        Do not sort fields
  --output OUTPUTFILE, -o OUTPUTFILE
                        Render output file. Type of output dependend on file
                        extensions. Use png or jpg to render graph to image.
  --language LANGUAGE, -L LANGUAGE
                        Specify language used for verbose_name localization
  --group-models, -g    Group models together respective to their application
  --pygraphviz          Use PyGraphViz to generate the image.
  --json                Output graph data as JSON
  --layout LAYOUT, -l LAYOUT
                        Layout to be used by GraphViz for visualization.
                        Layouts: circo dot fdp neato nop nop1 nop2 twopi
  --exclude-models EXCLUDE_MODELS, -X EXCLUDE_MODELS
                        Exclude specific model(s) from the graph. Can also
                        load exclude list from file. Wildcards (*) are
                        allowed.
  --disable-fields, -d  Do not show the class member fields
  --pydot               Use PyDot(Plus) to generate the image.
  --all-applications, -a
                        Automatically include all applications from
                        INSTALLED_APPS
  --no-inheritance, -E  Do not include inheritance arrows
